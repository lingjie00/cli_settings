#!/bin/bash

# Check if machine has internet access beyond pypi #
INTERNET=$1
# read -p "Good day, do we have internet access beyond pypi? - y/n " INTERNET

# check if user want to setup workplace script
WORKPLACE=$2
# read -p "Do you want to set up workplace script? - y/n " WORKPLACE

###################
# Helper function #
###################
custom_ln () {
    # loops through the inputs to create symbolic links
    # if file exist, then do nothing
    for file in "$@"
    do
        path=$HOME/$file
        if [ -e $path ]; then
            echo "$file exist"
        else
            echo "creating $file symlink";
            ln -s $PWD/$file $HOME/$file
        fi
    done
}

#######################
# check folder exists #
#######################
echo "======================="
echo "creating symbolic links"
echo "======================="
[ -d $HOME/.config ] || { echo "creating .config folder"; mkdir $HOME/.config; }

#########################
# create symbolic links #
#########################
custom_ln ".vimrc" ".tmux.conf" ".gitconfig"
custom_ln ".config/nvim" ".config/fish"

# only if access beyond pypi is available
if ! [[ $INTERNET =~ ^[Nn].* ]]; then
    echo "====================================="
    echo "set up files for internet only config"
    echo "====================================="

    custom_ln ".qutebrowser" ".config/zathura" ".w3m" ".config/alacritty"

    # macos specific config files
    if [[ "$OSTYPE" == "darwin"* ]]; then
        mfolders=(
            ".config/skhd"
            ".config/yabai"
            ".config/limelight"
            ".config/karabiner"
            ".config/kitty"
        )
        custom_ln "${mfolders[@]}";
    fi

    # linux specific config files
    if [[ "$OSTYPE" == "linux"* ]]; then
        lfolders=(
            ".config/i3"
            ".config/i3blocks"
            ".config/rofi"
        )
        custom_ln "${lfolders[@]}";
    fi

    # ensure check.lua is yes
    echo "Internet = 1" > $HOME/.config/nvim/lua/check.lua

else
    # change the check.lua to no
    echo "Internet = 0" > $HOME/.config/nvim/lua/check.lua
fi

####################
# workplace script #
####################
if [[ $WORKPLACE =~ ^[Yy].* ]]; then
    echo "======================="
    echo "Set up workplace script"
    echo "======================="

    files=("nb_clean" "tmux_setup")
    for file in ${files[@]}
    do
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            [ -f /usr/local/bin/$file ] || { echo "transfer $file"; sudo ln -s $PWD/$file /usr/local/bin/$file; }
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            [ -f /usr/local/bin/$file ] || { echo "transfer $file"; sudo ln -s $PWD/$file /usr/local/bin/$file; }
        fi
    done
fi


# auto download neovim in GitHub Codespaces
if printenv CODESPACES > /dev/null; then
    echo "Downloading and Unziping Neovim into /workspaces"
    wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz /workspaces/
    tar xzvf /workspaces/nvim-linux64.tar.gz
    ln -s /workspaces/nvim-linux64/bin/nvim $HOME/.local/bin/nvim

    echo "Setting TERM to xterm"
    echo "" >> $HOME/.bashrc
    echo "export TERM=xterm" >> $HOME/.bashrc
fi

# install tmux plugin manager
if [ ! -d $HOME/.tmux/plugins/tpm ]; then
    echo "installing tmux plugin manager"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi


echo "================"
echo "Done with config"
echo "================"
